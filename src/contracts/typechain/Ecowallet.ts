/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EcowalletInterface extends utils.Interface {
  functions: {
    "_deployRuntime(bytes)": FunctionFragment;
    "exec(bytes,bytes,uint256)": FunctionFragment;
    "getExecuteInfo()": FunctionFragment;
    "getRuntimeByRuntimeCode(bytes)": FunctionFragment;
    "getWallet(address,uint256)": FunctionFragment;
    "reexec(address,bytes,uint256)": FunctionFragment;
    "wasNonceUsed(address,uint248)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_deployRuntime"
      | "exec"
      | "getExecuteInfo"
      | "getRuntimeByRuntimeCode"
      | "getWallet"
      | "reexec"
      | "wasNonceUsed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_deployRuntime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecuteInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRuntimeByRuntimeCode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallet",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reexec",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wasNonceUsed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_deployRuntime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExecuteInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuntimeByRuntimeCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reexec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wasNonceUsed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Ecowallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EcowalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _deployRuntime(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exec(
      runtimeCode: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExecuteInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { runtime: string; callData: string }>;

    getRuntimeByRuntimeCode(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWallet(
      owner: PromiseOrValue<string>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reexec(
      runtime: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wasNonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _deployRuntime(
    runtimeCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exec(
    runtimeCode: PromiseOrValue<BytesLike>,
    callData: PromiseOrValue<BytesLike>,
    walletSalt: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExecuteInfo(
    overrides?: CallOverrides
  ): Promise<[string, string] & { runtime: string; callData: string }>;

  getRuntimeByRuntimeCode(
    runtimeCode: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWallet(
    owner: PromiseOrValue<string>,
    walletSalt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  reexec(
    runtime: PromiseOrValue<string>,
    callData: PromiseOrValue<BytesLike>,
    walletSalt: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wasNonceUsed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _deployRuntime(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      runtimeCode: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecuteInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { runtime: string; callData: string }>;

    getRuntimeByRuntimeCode(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWallet(
      owner: PromiseOrValue<string>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    reexec(
      runtime: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wasNonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _deployRuntime(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exec(
      runtimeCode: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExecuteInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRuntimeByRuntimeCode(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallet(
      owner: PromiseOrValue<string>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reexec(
      runtime: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wasNonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _deployRuntime(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exec(
      runtimeCode: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExecuteInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRuntimeByRuntimeCode(
      runtimeCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallet(
      owner: PromiseOrValue<string>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reexec(
      runtime: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      walletSalt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wasNonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
